function [methodinfo,structs,enuminfo,ThunkLibName]=fnmM
%FNMM Create structures to define interfaces found in 'if_matlab'.

%This function was generated by loadlibrary.m parser version  on Sun Aug 19 14:30:19 2018
%perl options:'if_matlab.i -outfile=fnmM.m -thunkfile=fnm_thunk_glnxa64.c -header=if_matlab.h fnm_types.h if_fnm.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'fnm_thunk_glnxa64');
% int ApertureCreate ( Aperture ** obj ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ApertureCreate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtrPtr'};fcnNum=fcnNum+1;
% int ApertureLinearCreate ( Aperture ** obj , size_t nElements , float width , float kerf , float height ); 
fcns.thunkname{fcnNum}='int32voidPtrulongfloatfloatfloatThunk';fcns.name{fcnNum}='ApertureLinearCreate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtrPtr', 'ulong', 'single', 'single', 'single'};fcnNum=fcnNum+1;
% int ApertureDestroy ( Aperture * obj ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ApertureDestroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtr'};fcnNum=fcnNum+1;
% int FreeCArray ( void * pData ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeCArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ApertureNDivWSet ( Aperture * obj , size_t nDiv ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='ApertureNDivWSet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtr', 'ulong'};fcnNum=fcnNum+1;
% size_t ApertureNDivWGet ( Aperture * obj ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='ApertureNDivWGet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'AperturePtr'};fcnNum=fcnNum+1;
% int ApertureNDivHSet ( Aperture * obj , size_t nDiv ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='ApertureNDivHSet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtr', 'ulong'};fcnNum=fcnNum+1;
% size_t ApertureNDivHGet ( Aperture * obj ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='ApertureNDivHGet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'AperturePtr'};fcnNum=fcnNum+1;
% size_t ApertureNThreadsGet ( Aperture * obj ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='ApertureNThreadsGet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'AperturePtr'};fcnNum=fcnNum+1;
% int ApertureNThreadsSet ( Aperture * obj , size_t nThreads ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='ApertureNThreadsSet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtr', 'ulong'};fcnNum=fcnNum+1;
% int ApertureFocusingTypeSet ( Aperture * obj , int ftype ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ApertureFocusingTypeSet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtr', 'int32'};fcnNum=fcnNum+1;
% int ApertureCalcCwFieldRef ( Aperture * obj , float * pos , size_t nPositions , size_t nDim , float _Complex ** odata , size_t * nOutPositions ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ApertureCalcCwFieldRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtr', 'singlePtr', 'ulong', 'ulong', 'voidPtrPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int ApertureCalcCwFieldFast ( Aperture * obj , float * pos , size_t nPositions , size_t nDim , float _Complex ** odata , size_t * nOutPositions ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ApertureCalcCwFieldFast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'AperturePtr', 'singlePtr', 'ulong', 'ulong', 'voidPtrPtr', 'ulongPtr'};fcnNum=fcnNum+1;
structs.FNM_FocusingTypeNS.members=struct('error0', 'voidPtr');
structs.RwParamTypeNS.members=struct('error0', 'voidPtr');
structs.FNM_TypeNS.members=struct('error0', 'voidPtr');
structs.FNM_ApodizationTypeNS.members=struct('error0', 'voidPtr');
structs.Aperture.members=struct('');
enuminfo.MyMatlabEnum=struct('First',0,'Last',1);
methodinfo=fcns;